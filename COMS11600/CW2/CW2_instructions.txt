This assignment requires you to compare two ways of storing and retrieving data records. In order to do the comparison, you must write a program which stores data records in

a linked list 

and

a hash table with direct chaining as collision resolution strategy.

The data to be used for this assignment is the short novel "A Portrait
of the Artist as a Young Man" by James Joyce. You can download it from
the Blackboard and save it as a text file. Your program must take the
file name as an argument to main(), e.g. if your program is called
assignment2.c and the text file is called a_portrait.txt, you
would call your program using assignment2 a_portrait.txt.  When
your program has read the input text file, it is expected to answer
queries via a user interface. For a query, the user types in a
keyword. To answer a query, your program prints the number of
occurrences of the given keyword in the input text file (and possibly
some other statistics). As an example, we use the following text
(named handbook.txt), which is part of the current CS Handbook p. 23.

Coursework has to be done during a specified time - this means that
you make the best use of your time and we are able to monitor your
progress and make available the equipment, lab time, etc, that you'll
need to do the work.  Running your program could result in the
following trace: 

Assignment> assignment2 handbook.txt

Reading into a list took 1.05s for 44 words.  
Reading into a table took 0.54s for 44 words.

Enter word for retrieval: time

'time' occurs 3 times.
Retrieval from list took 9 comparisons.
Retrieval from table took 3 comparisons.

Another query? [y/n] y
Enter word for retrieval: your

'your' occurs 2 times.
Retrieval from list took 19 comparisons.
Retrieval from table took 2 comparisons.

Another query? [y/n] n
Assignment>

Program Design

Choose a systematic approach when designing your program: Define the
data structures that you need. Define the functions that you need to
operate on these data structures. Re-use types and functions wherever
possible. If a problem is too difficult to solve in one go, divide and
conquer. A good starting point is to first develop a program that uses
the linked list approach. Several functions of this code can be
re-used when extending the program to use a hash table. (Note: You
must hand in ONE program only; not one for the linked list and another
one for the hash table!) A good solution will have at least 6
functions in addition to the main program:
A function that reads the data.
A function that inserts data into the linked list.
A function that retrieves data from the linked list.
A function that inserts data into the hash table.
A function that retrieves data from the hash table.
A function that handles the queries.
Choose the hash function and the size of the hash table carefully. In
your program comments, give 3 examples for possible hash functions and
table sizes and justify your final choice. You will have to set some
conventions e.g. for dealing with capitalised words, or phrases like
"I'll" and "we've". There is not a single right solution. Choose
something which seems sensible to you, and motivate it in the comment
of your program.

Deadline

The deadline for this assignment is Tuesday 22nd of January 2013,
23:59. Don't leave this to the last minute. You are advised to design
the program thoroughly, by structure and by function/task, before you
begin coding.  

Assessment

You will have to mark your assignment yourself, using the marking
scheme provided on the marksheet. I will see all of you for 10
minutes, during which we discuss your program and mark. If your mark
is too high, I subtract twice the difference, if it is too low I add
half the difference (this should motivate you to give yourself a mark
which is just right). You must bring your portfolio, which must
include a printout of the code, report (if appropriate) and the
marksheet. You may also bring any design notes you drafted prior to
coding.  

Submission

You must submit your work using the electronic submission system. Your
submission should contain: 

The source code of your program.  

Sample output showing: 

 The time taken to organise the data in 
  a) the linked list and 
  b) the hash table; 
 and the total number of words read.  

 The size of the hash table, the number of empty indexes, what percentage
 of the hash table is used (i.e. not empty) and the maximum length of
 an overflow list.  

 The number of comparisons necessary to retrieve the
 words: looking, me, attractive, please, where, knock and computer
 together with the number of occurrences of these words in the text.

 The sample output should be submitted in a file called OUTPUT.txt.  

A short report comparing: 

 The time spent to organise the data in the linked list with the time
 spent to organise the data in the hash table.

 The number of comparisons necessary to retrieve the above named
 keywords from the linked list with the number of comparisons necessary
 to retrieve these from the hash table.

 with a suitable conclusion. 

 This report should be no longer than 3-500 words. (Use a word
 counting facility if you are not sure, e.g. wc for Unix.)

 Itshould be an ordinary text file, called REPORT.txt. (Note: You can
 bring printouts of diagrams to our meeting if you wish.) Note: this
 report is only required if you have experimented with different
 versions.  

A marksheet where you have filled in the blanks. Download the
marksheet from Blackboard, fill it in (using an editor, e.g. emacs)
and submit it in a file called MARK.txt.
