; bubblesort

start:
    ; r0 = pointer to A[0]
    la r0,array
    ; r1 = n (length of array) TODO: Use pointer eq no need for len
    la r1,array_end
    sub r1,r1,r0
oloop_start:
    ; r2 = newn (n optimisation)
    movi r2,0
    ; for i = 1 to n - 1 (inc)
    ; r3 = i
    movi r3,1
    ; r4 = i - 1 (we have plenty of registers!)
    movi r4,0
iloop_start:
    ; if A[i-1] > A[i] => if A[i] - A[i-1] < 0
    ; r5 = A[i]
    ld r5,r0,r3
    ; r6 = A[i-1]
    ld r6,r0,r4
    ; r7 = temp (comparison)
    sub r7,r5,r6
    bn r7,endif
    ; if body
    ;swap A[i-1] and A[i]
    st r6,r0,r3
    st r5,r0,r4
    ; newn = i
    mov r2,r3
endif:
    ; i++
    addi r3,1
    addi r4,1
    ; break if > n-1
    bge r3,r1,iloop_end
    br iloop_start
iloop_end:
    ; n = newn
    mov r1,r2
    ; loop unti n = 0
    bz r1,oloop_end
    br oloop_start
oloop_end:
    ; Infinite loop
    nop
    br oloop_end

    .word 0xdeadbeef
array:
    .word 84
    .word 9000
    .word 1
    .word 17
    .word 42
    .word 100
    .word 5
    .word 2
    .word 1
    .word 99
array_end:
    .word 0xdeadbeef
