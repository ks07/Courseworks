Q.1 As a security consultant, you have been working on a prototype of the
    attack target; before the product is deployed, the vendor is willing to
    make any alteration necessary (in software or hardware) to prevent the
    attack.  Explain the options available, and which one you would
    recommend.

    The first option for countermeasures is to consider the transistor level. It is possible to design and manufacture both gates and circuitry in order to reduce information leakage by power usage. For example, a hardware adder might consume more power when more output bits are hot, and it may be possible to design a custom adder that draws nearly-constant power regardless of the output data. Whilst these changes are independent of the algorithm used for encryption, the need for dedicated and specially designed components will greatly increase fabrication, design, and verification costs. Furthermore, preventing all information leakage through only transistor level changes is not possible. Therefore, a dedicated attacker could overcome these countermeasures given enough power traces to analyse.

    At the program level, random dummy instructions could be inserted throughout the implementation. This will make the alignment of multiple power traces much more difficult, thus limiting the effectiveness of the DPA attack. Whilst this countermeasure is straightforward and seemingly effective, the random instructions can simply be considered as random noise in the measured power traces. Therefore, an attacker can simply increase the number of power traces used, effectively averaging out the random noise. In a similar manner, the implementation could also randomly reorder operations in the AES algorithm. The amount by which operations could be reordered without affecting correctness of the ciphertext is limited, so I would discount this countermeasure also.

    Protection against DPA can be gained from masking. In terms of AES, the key and/or message is represented by at least two shares, i.e. splitting the key in such a way that only a party with access to all the shares can recover the key (as in secret sharing), for example by XOR'ing all the shares. Before encrypting the input message, the key/message is used to generate shares with a random mask. The masked values are passed into the encryption operation, and the result is unmasked before being output as the ciphertext. As an attacker has no knowledge of the random value used as the mask, they do not have required knowledge of data used by AES in order to perform the correlation steps required for DPA. This is a very similar operation to that of blinding in RSA.

    I would recommend using masking, as it rules out the attack completely. However, care must be taken that the masking and unmasking operations are not themselves vulnerable to side channel attacks of their own.

Q.2 Your implementation of this attack will target some operation during
    execution of AES.  Identify which operation you target, and explain
    why.  Outline other operation(s) you could have targeted, and why they
    might be a better or worse choice.

    My attack targets the SubBytes operation in the first round of AES. This is because this operation is preceeded only by a single AddRoundKey step. It operates on each byte independently, and produces a power trace that is highly dependent on the values of the key bytes (from that first AddRoundKey). A potential alternative operation to target would be the final AddRoundKey step in the 10th round. The output of this operation is the ciphertext, thus we have some knowledge of the values involved in this step. As this is the final step in the algorithm, any correlation measured here might be much less than that seen for the first round, thus we may need more power traces in order to correctly determine the key. Another disadvantage to targetting this step is the need to invert the KeySchedule function to obtain the key from the 10th round key.

Q.4 DPA attacks rely on a leakage model; for an Intel 8051, one might
    consider Hamming weight or Hamming distance models for example. Explain
    and justify the choice of model you used (e.g., explain why/how the
    attack target might leak information in this way).
Q.7 DPA attacks include a statistical analysis step, for which one option
    is use of the t-test.  Explain what the difference between a standard
    t-test and Kocher's method is.  Given that in a DPA attack one might
    have unequal sets of measurements associated with 0 and 1, is a
    standard t-test actually an appropriate choice?
